.pv : promise view
 ANY  →  promiseView([\
  checkRes('$expr$_json')\
  ]).then((res) => { $end$ });


.v : set display visible
 ANY →  this['$expr$'].visible = $val:enum("true", "false")$;

.list : refresh list
 ANY → this['$expr$'].itemRenderer = $item$;refreshList(this['$expr$'], $arr$);

.tap : tap
 ANY → this.tap(this['$expr$'], this.$fn$, this);

.max : set progress maximum
 ANY → this['$expr$'].maximum = $val$;

.val : set progress value
 ANY → this['$expr$'].value = $val$;

.pb :  set progress
 ANY → this['$expr$'].maximum = $max$;this['$expr$'].value = $val$;

.ds : dispose
 ANY → if ($expr$) { $expr$.dispose(); $expr$ = null; }

.uw : dispose
 ANY → if ($expr$) { $expr$.unwatch(); $expr$ = null; }

.itemTap : set list itemtap
 ANY → this.disposeArr.push(itemTap(this['$expr$'], this.onTap, this));

.t : set label text
	ANY  →  this['$expr$'].text = $end$;

.a : set display alpha
	ANY  →  this['$expr$'].alpha = $end$;

.sx : set display scaleX
	ANY  →  this['$expr$'].scaleX = $end$;

.sy : set display scaleY
	ANY  →  this['$expr$'].scaleY = $end$;

.sy : set display scale
	ANY  →  this['$expr$'].scaleX = this['$expr$'].scaleY = $end$;

.l : set display label
	ANY  →  this['$expr$'].label = $label$;

.rl : refresh list
	ANY  →  refreshList(this['$expr$'], $end$);

.ir : set item render
	ANY  →  this['$expr$'].itemRenderer = $end$;

.src : set image source
	ANY  →  this['$expr$'].source = $end$;

.req : socket request
	ANY  →  request($expr$).then(res => {if (res) { $end$ }});

.reqp : socket request params
	ANY  →  request($expr$, {$params$}).then(res => {if (res) { $end$ }});

.box : show box
	ANY  →  UI.openBox(new $expr$($end$));

.tf : set text flow
	ANY  →  this['$expr$'].textFlow = new egret.HtmlTextParser().parser($end$);

.input : get input text
	ANY  →  let $var:jsSuggestVariableName()$ = this['$expr$'].text.trim();

.e : set display enable
	ANY  →  this['$expr$'].enabled = $val:enum("true", "false")$;

.conf : get config
	ANY  →  getConfig('$expr$_json')

.res : check res
	ANY  →  checkRes('$expr$_json')

.s : get type instance
	ANY  →  singleton($expr$)

.event : list item tap
	ANY  →  this.disposeArr.push(event($obj::"this"$, $expr$, this.$fn$, this));

.log : console.log
	ANY  →  console.log($expr$);

.thm : check theme
	ANY  →  checkTheme('eui_$expr$_json')

.vi : set visible and includeInLayout
	ANY  →  this['$expr$'].visible = this['$expr$'].includeInLayout = $visible:enum("true", "false")$;

.full : set full behavior
	ANY  →  $expr$.addBehavior(new FullBehavior());

.on : on event
	ANY  →  this.on('$expr$', this.$fn$, this);

.touch : set display touch
	ANY  →  this['$expr$'].touchEnabled = this['$expr$'].touchChildren = $val:enum("true", "false")$;

.ac : add child
	ANY  →  this['$expr$'].addChild($end$);

.vc : set cache to variable
	ANY  →  let $var:jsSuggestVariableName()$ = getCache('$expr$');

.confirm : show confirm
	ANY  →  confirm(tr($expr$)).then(res=> { if (res == 'yes') { $end$ }})

.tip : show tooltip
	ANY  →  tooltip(tr($expr$));

.tr : translation text
	ANY  →  tr('$group:enum("act", "tree", "adv", "arena", "base", "battle", "common", "create", "digong", "dl", "event", "finance", "fish", "fly", "guide", "guild", "hero", "home", "main", "mystery", "nest", "npc", "sect", "pet", "tiant", "ui", "un", "union", "youli")$@$expr$')

.rm : remove UI
	ANY  →  UI.remove($expr$);
